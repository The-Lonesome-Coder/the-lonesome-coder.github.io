<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第四章 - 正式啟航 - C++的變數和基石</title>
      <link href="/2023-11-17/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%AD%A3%E5%BC%8F%E5%95%9F%E8%88%AA-c-%E7%9A%84%E8%AE%8A%E6%95%B8%E5%92%8C%E5%9F%BA%E7%9F%B3/"/>
      <url>/2023-11-17/%E7%AC%AC%E5%9B%9B%E7%AB%A0-%E6%AD%A3%E5%BC%8F%E5%95%9F%E8%88%AA-c-%E7%9A%84%E8%AE%8A%E6%95%B8%E5%92%8C%E5%9F%BA%E7%9F%B3/</url>
      
        <content type="html"><![CDATA[<img src=Foundation.png title="在喧囂進展中，基礎默默承載，為遠大夢想提供穩固之根" height=50% width=50%><div class="admonition info"><p class="admonition-title">延伸筆記例外 (再次告知)</p><p>某些粗體的知識點，鑑於其深度和重要性，將在不久的將來透過專門的文章來進行全面而詳細的闡述。因此，這些特定的知識點在當前的討論中將不包含額外的筆記，以便為它們即將到來的專門文章留下充分的展示空間。</p></div><div class="admonition info"><p class="admonition-title">我的編程環境 &amp; C++版本</p><p>以下為我的編程環境 &amp; C++版本，如無另外註記，未來文章皆為此規格:</p><ul><li>Windows 11 (64-bit)</li><li>Visual Studio Code (最新版，寫文章時為1.84.2)</li><li>MinGW/GCC g++ (最新版，寫文章時為13.2.0)</li><li><strong>C++20</strong>, 國際標準組織號碼: ISO/IEC 14882:2020</li></ul></div><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>在掌握任何一種程式語言的學習旅程中，理解其基礎概念是至關重要的。正如古人所言：“萬丈高樓平地起”，在軟體開發的世界裡，堅實的基礎知識就如同建築物的地基。這一章節，我們將深入探討C++中的基本組成部分 - 變數，這是學習C++之旅中的第一步。<br><br/></p><h2 id="什麼是變數🤔-Variable"><a class="header-anchor" href="#什麼是變數🤔-Variable"></a>什麼是變數🤔 (Variable)?</h2><p>在C++中，<strong>變數</strong>可以被看作是儲存資料的容器。每個變數都有其特定的資料類型與名字，資料類型決定了變數可以儲存什麼樣的資料以及可以在這些資料上進行什麼樣的操作；而名字是用來讓電腦知道你正在操作的是哪個變數。瞭解不同類型的變數對於開發高效、錯誤較少的程式至關重要。</p><div class="admonition info"><p class="admonition-title">變數 - 白話化</p><p>如果有點抽象，把每個變數想像成一個盒子，你可以在裡面放任何你想要的東西，比如玩具、書本或糖果。而在程式語言裡，這些盒子叫做「變數」。不同的是，在程式語言裡，你需要幫這些盒子(變數)命名，例如專門放玩具的盒子(變數)，叫做toy；專門放書本的，叫做book···以此類推。</p><p>這些變數可以存儲不同的東西，像是數字、字母或是其他資訊。此外，就像你的盒子可以改變裡面放的東西，C++中的變數也可以改變它們儲存的資訊。例如，一個變數開始時可能儲存了數字10，但之後我們可以改變它，讓它儲存數字20。</p></div><br/><h2 id="C-的基本資料類型-Basic-Data-Type"><a class="header-anchor" href="#C-的基本資料類型-Basic-Data-Type"></a>C++的基本資料類型 (Basic Data Type)</h2><p>每個變數都有特定的資料類型，在瞭解變數是什麼後，接下來，我們將深入探討C++中的基本資料類型。</p><ol><li>整數類型 (Integer Types) - 分為有號整數與無號整數<ul><li><strong>short (短整數)</strong>: 可以儲存32<strong>位元</strong>的整數，範圍為-32,768 ↔ 32,767。</li><li><strong>int (標準整數)</strong>: C++標準指定int的大小16位元，最多可以到32位元。我的編成環境為32位元，範圍為-2,147,483,648 ↔ 2,147,483,647。</li><li><strong>long int (長整數)</strong>: C++標準指定long int的大小32位元，最多可以到64位元。我的編成環境為32位元，範圍為-2,147,483,648 ↔ 2,147,483,647。由於在我的編成環境，int為4位元，目前尚未使用過long int。</li><li><strong>long long int (超長整數)</strong>: 可以儲存64位元的整數，範圍為-9,223,372,036,854,775,807 ↔ 9,223,372,036,854,775,807。</li></ul></li></ol><div class="admonition info"><p class="admonition-title">signed (有號) vs unsigned (無號)</p><p>signed 和 unsigned 在 C++ 中為所謂的&quot;修飾符&quot;(Modifier)。</p><p>所有整數類型可以分為有號整數(signed integer)與無號整數(unsigned integer)。整數皆默認為有號整數，但可以通過 &quot;unsigned&quot; 修飾符來變成無號整數，也就是不包含負數(等於可以儲存原本範圍的2倍)。因此，unsigned 整數的範圍為:</p><ul><li><strong>unsigned short</strong>: 0 ↔ 65,535。</li><li><strong>unsigned int</strong>: 0 ↔ 4,294,967,295。</li><li><strong>unsigned long int</strong>: 0 ↔ 4,294,967,295。</li><li><strong>unsigned long long int</strong>: 0 ↔ 18,446,744,073,709,551,615。</li></ul></div><div class="admonition info"><p class="admonition-title">位元 (Bit)</p><p>算機科學中資訊量的基本單位，是“Binary Digit”的縮寫，直譯為「<strong>二進位</strong>數字」。</p><ul><li>它代表了二進制系統中的一個數字，只能是0或1。</li><li>8位元為1位元組(Byte)。</li></ul></div><div class="admonition info"><p class="admonition-title">二進位 (Binary)</p><p>二進制是一種用來表示數字的系統，它只使用兩個數字：0 和 1。這種系統在計算機科學中非常重要，因為它是電腦處理和存儲信息的基礎。</p><p>想像一下，如果你只有兩個數字來表示所有的數字，你該如何做呢？在二進制中，每位元只能是0或1。比如說，二進制的101代表十進制的5。在十進制中，我們有0到9這十個數字來表示數量，而在二進制中，我們只有0和1。</p><p>在二進制中，每一位的值是加倍的。最右邊的位稱為 &quot;個位&quot;，它的值可以是0或1。向左的下一位是 &quot;二位&quot;，它的值可以是0或2。再向左是 &quot;四位&quot;，它的值可以是0或4，依此類推。所以，當你看到一串二進制數字如1101時，你可以將它解釋為8+4+0+1(2<sup>3</sup>x1 + 2<sup>2</sup>x1 + 2<sup>1</sup>x0 + 2<sup>0</sup>x1)，這等於在十進制中的13。</p><p>二進制在電腦科學中非常重要，因為電腦使用電路，這些電路只有開（1）和關（0）兩種狀態。因此，使用二進制可以讓電腦以非常基本的方式處理和存儲信息。简而言之，二進制是計算機科學的基礎，它利用只有0和1的簡單系統來表示和處理所有類型的數據。</p><p>延伸閱讀:</p><ul><li><a target="_blank" rel="noopener" href="https://zh.wikipedia.org/zh-tw/%E4%BA%8C%E8%BF%9B%E5%88%B6">二進位 - Wikipedia</a></li><li><a target="_blank" rel="noopener" href="https://www.youtube.com/watch?v=VsefOJjva5I">什麼是二進位？</a></li></ul></div><br/><ol start="2"><li>浮點數類型 (Floating-Point Types) - 帶有小數點的數<ul><li><strong>float (單精度浮點數)</strong>: 32位元。範圍為3.4x10<sup>-38</sup> ↔ 3.4x10<sup>38</sup>。精度約為小數點後6~7位。</li><li><strong>double (雙精度浮點數)</strong>: 64位元。範圍為1.7x10<sup>-308</sup> 1.7x10<sup>308</sup>。精度約為小數點後15~16位。</li><li><strong>long double (延伸雙精度浮點數)</strong>: 80位元。範圍為3.4x10<sup>-4932</sup> ↔ 3.4x10<sup>4932</sup>。精度約為小數點後18~19位。</li></ul></li></ol><div class="admonition warning"><p class="admonition-title">unsigned 修飾符</p><p>浮點數無法使用修飾符 unsigned。浮點數全部為 signed。原因請參考IEEE 754。</p></div><div class="admonition info"><p class="admonition-title">精度 (Precision)</p><p>誠如前面所說，電腦是以二進位制(0與1)儲存資料，不像我們在日常表示浮點數時，是以10進位(或分數)來表示。因此，電腦在表示浮點數時，當遇到不能被精確表示的浮點數時(例如: 1/3為0.33333循環)，電腦會尋找最接近的可表示值，這就導致了所謂的「舍入誤差」。舍入誤差在進行多次數學運算時可能會累積，導致最終結果與預期有顯著差異。</p><p>浮點數是採用IEEE 754標準格式來表示，具體表示方式需要單獨拉出一篇文章來講解，在此就先記得浮點數會失精度就可以了。</p><p>如果有興趣，我推薦以下文章與影片:</p><ul><li><a target="_blank" rel="noopener" href="https://medium.com/starbugs/see-why-floating-point-error-can-not-be-avoided-from-ieee-754-809720b32175">從 IEEE 754 標準來看為什麼浮點誤差是無法避免的</a></li><li><a target="_blank" rel="noopener" href="https://zh.wikipedia.org/zh-tw/IEEE_754">IEEE 754 - Wikipedia</a></li><li><a target="_blank" rel="noopener" href="https://www.youtube.com/watch?v=RuKkePyo9zk">IEEE 754 Standard for Floating Point Binary Arithmetic</a></li></ul></div><br/><ol start="3"><li>字元類型 (Character Types) - 文字 (例如英文字母、中文文字)<ul><li><strong>char (字元)</strong>: 8位元。可以儲存一個<strong>ASCII</strong>字母。</li><li><strong>wchar_t (寬字元)</strong>: 16位元。可以儲存寬字元，通常用於表示<strong>Unicode</strong>字符。</li><li>剩下的字元類型有char8_t、char16_t、char32_t，分別用來儲存UTF-8、UTF-16、UTF-32字符，在此不展開探討。</li></ul></li></ol><div class="admonition info"><p class="admonition-title">unsigned 修飾符</p><p>unsigned 修飾符可以用在char上，以順利使用256擴展版本的ASCII。</p></div><div class="admonition info"><p class="admonition-title">美國標準資訊交換碼 (American Standard Code for Information Interchange, ASCII)</p><p>一種用於表示文字在電腦中的編碼系統。</p><ul><li>最初是為了美國的電腦和通信設備而設計的，但後來成為全球最廣泛使用的文字編碼之一。</li><li>ASCII使用8位元來表示每個字符，這使它可以表示128（或256在擴展版本中）不同的字符。</li><li>每個字符（如字母、數字、標點符號）都被分配了一個特定的數字代碼。例如，大寫字母 &quot;A&quot; 的ASCII代碼是65，小寫的 &quot;a&quot; 是97。</li></ul><p>ASCII號碼對照表請參考 (特別看一下英文字母對應的ASCII數字代碼):</p><ul><li><a target="_blank" rel="noopener" href="https://www.ascii-code.com/">ASCII Table</a></li></ul></div><div class="admonition info"><p class="admonition-title">Universal Character Encoding Standard (Unicode)</p><p>一種電腦編碼標準，它的目的是為了解決傳統編碼系統所面臨的一個主要問題：不同的編碼系統不兼容。</p><p>在Unicode出現之前，世界各地有許多不同的編碼系統，用於表示各自語言的文字。這導致了一個問題，即不同語言和系統之間的文檔和數據很難交換和理解。</p><p>Unicode的核心思想是為世界上所有的文字和符號提供一個唯一的代碼（即一個獨特的編號）。例如，英文字母 “A” 在Unicode中有一個獨特的代碼(U+0041)，而漢字 “中” 也有另一個獨特的代碼(U+4E2D)。這樣，不論使用哪種語言，只要系統支持 Unicode，就能正確顯示和處理這些文字。</p><p>Unicode涵蓋了從古典至現代的各種文字系統，包括標點符號、數字、符號，甚至是表情符號。因此，它使得全球不同語言和符號的數位交換成為可能，大大促進了全球信息交流的便利性。最普遍的編碼格式是和ASCII相容的UTF-8。</p><p>想多瞭解Unicode，我推薦以下文章:</p><ul><li><a target="_blank" rel="noopener" href="https://zh.wikipedia.org/zh-tw/Unicode">Unicode - Wikipedia</a></li></ul></div><br/><ol start="4"><li><p>布林類型 (Boolean Type) - 用於表示簡單的是或不是、真或假的情況，多用於進行邏輯判斷，從而控制程式的流程</p><ul><li><strong>true (真)</strong></li><li><strong>false (假)</strong><br><br/></li></ul></li><li><p>無類型 (Void Type) - 通常用於指定函式不返回任何值 (未來講到函式再探討)</p><ul><li><strong>void (無類型)</strong><br><br/></li></ul></li></ol><h2 id="註解"><a class="header-anchor" href="#註解"></a>註解</h2><p>開始之前，先來說說什麼是註解(Comment):</p><p>C++中的註解是一種程式碼中的說明或備註，用於幫助理解程式碼的功能或意圖，但不會被編譯器編譯成執行程式的一部分。換句話說，註解是給人閱讀的，而非給電腦執行的。</p><p>註解對於維護程式碼、解釋複雜的邏輯或記錄程式碼的修改非常重要。它們可以幫助其他開發者（或未來的你）更快地理解程式碼的目的和功能。但是，過多或冗餘的註解可能會使程式碼雜亂無章，因此應適度地使用註解。</p><p>在C++中，有兩種主要的註解方式：</p><ol><li>單行註解：用兩個斜線（//）開始，持續到該行的結尾。例如： <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 這是一個單行註解</span></span><br><span class="line"><span class="type">int</span> number = <span class="number">5</span>;   <span class="comment">// 這是一個單行註解</span></span><br></pre></td></tr></table></figure></li></ol><br/><ol start="2"><li>多行註解：由斜線和星號（/<em>）開始，並由星號和斜線（</em>/）結束。它可以跨越多行。例如： <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 這是一個</span></span><br><span class="line"><span class="comment"> *  多行註解</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> number = <span class="number">10</span>;</span><br></pre></td></tr></table></figure></li></ol><br/><p>理解註解後，直接進入主題。<br><br/></p><h2 id="變數的宣告與初始化"><a class="header-anchor" href="#變數的宣告與初始化"></a>變數的宣告與初始化</h2><p>宣告變數主要是為了讓電腦知道某個名稱將會儲存什麼樣的資料類型，並在未來可以使用它。</p><p>在C++中，變數宣告的方式如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 宣告方式: &quot;(資料類型) (變數名稱);&quot;</span></span><br><span class="line"><span class="type">int</span> number;</span><br></pre></td></tr></table></figure><p>這裡，“int” 是變數的類型，代表整數，而 “number” 是變數的名稱。</p><p>而初始化變數是為了給變數指定一個初始值。變數可以在宣告時<strong>初始化</strong>，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化方式: &quot;(資料類型) (變數名稱) &#123; (值) &#125;;&quot;</span></span><br><span class="line"><span class="comment">// 宣告一個整數變數，變數名稱為 &quot;number&quot;，初始化的值為10</span></span><br><span class="line"><span class="type">int</span> number &#123; <span class="number">10</span> &#125;;</span><br></pre></td></tr></table></figure><div class="admonition warning"><p class="admonition-title">初始化變數的重要性</p><p>初始化變數是一個好習慣，因為它防止了在程式中不小心使用未初始化的變數。如果使用了為初始化的變數，可能導致<strong>未被定義的行為</strong>。</p></div><div class="admonition warning"><p class="admonition-title">未被定義的行為 (Undefined Behavior)</p><p>指當程式碼中的操作或情況不被C++標準所明確定義時發生的行為。這意味著編譯器在遇到未定義行為時，有權採取任何行動，甚至不採取任何行動。這可能導致程序行為不預期、不一致，甚至導致程序崩潰。使用未初始化的變數是一個例子，其他例子未來會在遇到時告知。</p></div><div class="admonition warning"><p class="admonition-title">變數名稱規則 (Variable Name Rule)</p><p>在C++中，變數名稱的規則如下:</p><ul><li><strong>母和數字</strong>：變數名稱可以包含字母（a-z，A-Z）和數字（0-9），但是不能以數字開頭。</li><li><strong>底線</strong>：可以使用底線（_），並且變數名稱可以以底線開頭。但要注意不要使用雙底線或底線後接大寫字母開頭的變數名(例如: __Variable)，這些被保留給標準程式庫使用。</li><li><strong>大小寫敏感</strong>：C++是大小寫敏感的語言，這意味著Variable、variable和VARIABLE會被視為三個不同的變數。</li><li><strong>不含空格和特殊字符</strong>：變數名稱不能包含空格、標點符號或特殊字符（如%, #, @等）。</li><li><strong>不使用關鍵字</strong>：不能使用C++的<strong>保留關鍵字</strong>作為變數名，例如int、float、return、for···等。</li></ul></div><div class="admonition info"><p class="admonition-title">保留關鍵字 (Reserved Keyword)</p><p>C++中的保留關鍵字是那些被C++賦予特殊意義並用於執行特定操作的單詞。這些關鍵字不能用作變數名稱，因為它們已經為語言核心功能預留。</p><p>常見的關鍵字有: int, float, double, if, else, switch···等。</p><p>完整的關鍵字表請查閱:</p><ul><li><a target="_blank" rel="noopener" href="https://en.cppreference.com/w/cpp/keyword">C++ keywords</a></li></ul></div><br/><h2 id="結語"><a class="header-anchor" href="#結語"></a>結語</h2><p>今天就先到這裡啦。隨著我們逐步揭開C++這一強大語言的面紗，從最基本的變數類型開始，我們已經踏上了一段精彩的學習之旅。每一種數據類型不僅是編程的基本元素，更象徵著無限的可能性。它們就像是不同的畫筆，在計算機科學的廣闊畫布上勾勒出獨特而複雜的圖景。</p><p>作為初學者，你可能會感到有些許挑戰，但正是這些挑戰塑造了一個優秀的程序員。隨著時間的推移，這些基礎知識將成為你解決更複雜問題的基石。每個變數、每行代碼都是你在這個充滿創造力的領域中的一步。</p><p>在C++的世界裡，不斷的學習和實踐將引領你走向更高的高度。隨著你的知識庫逐漸豐富，你將能夠開發出更加強大和高效的應用程序，並且在這個不斷變化的科技世界中留下自己的足跡。因此，擁抱這段旅程，享受每一次學習和創造的樂趣，並期待著你所能達到的美好未來。</p><p>下一篇，我們將探索<strong>輸入輸出</strong>、<strong>整數的計算</strong>、一些重要的<strong>標準程式庫</strong>與其提供的<strong>函式</strong>。古語有云：“熟能生巧”，這正是我們接下來要實踐的智慧。因此，從下一篇文章開始，我將為您提供精心設計的練習題，旨在幫助您將新學到的知識牢牢銘記。這些練習將是您知識之樹的深根，讓所學的每一概念都在您的心智中生根發芽。</p><p>敬請期待我們的下一次探險，一起在C++的世界中更進一步，開啟學習的新篇章，共同見證知識轉化為技能的奇妙旅程。</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Coding </tag>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三章 - 最後準備 - C++歷史與演化</title>
      <link href="/2023-11-13/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9C%80%E5%BE%8C%E6%BA%96%E5%82%99-c-%E6%AD%B7%E5%8F%B2%E8%88%87%E6%BC%94%E5%8C%96/"/>
      <url>/2023-11-13/%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%9C%80%E5%BE%8C%E6%BA%96%E5%82%99-c-%E6%AD%B7%E5%8F%B2%E8%88%87%E6%BC%94%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<img src=First_Step.png title="陽光下小徑延展，旅者踏出了第一步，新的旅程在曙光中靜靜開啟" height=50% width=50%><div class="admonition info"><p class="admonition-title">參考資料</p><p>主要參考書籍為 - &quot;Horton, I. &amp; Weert, P. V. (2020). <em>Beginning C++20: From Novice to Professional</em> (6th Edition). Apress&quot;。其餘參考資料會在引用部份附上。</p></div><div class="admonition info"><p class="admonition-title">延伸筆記例外</p><p>某些粗體的知識點，鑑於其深度和重要性，將在不久的將來透過專門的文章來進行全面而詳細的闡述。因此，這些特定的知識點在當前的討論中將不包含額外的筆記，以便為它們即將到來的專門文章留下充分的展示空間。</p></div><br/><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>終於，我們即將踏上這激動人心的旅程，特別是對於那些渴望精通C++這門強大語言的朋友們來說。你是否正沐浴在學習的興奮之中？或許你還在遲疑，尋找勇氣去邁出這個重要的第一步。我自己也曾有過這樣的時刻，懷疑自己是否適合這個領域，或者擔心自己開始得太晚。但經過這些日子的思考，我想用幾句話來表達我的心路歷程：“學習程式設計的第一步雖然既令人興奮又充滿挑戰，但它卻是開啟無限可能的門檻。請記得，所有精通程式設計的人都是從新手開始，他們都經歷過疑惑和挑戰，最終才達到今天的高度。因此，不要害怕犯錯或感到困惑，這些都是學習過程中不可或缺的一部分。”</p><p>在這個章節裡，我們將一同深入探索C++的歷史和其逐漸成型的過程。作為一種擁有悠久歷史的程式語言，C++不僅豐富了計算機科學的領域，也持續推動著技術的創新與進步。深入了解C++的過去，將有助於我們更全面地理解其當前的面貌，並為未來的學習奠定堅實的基礎。讓我們一起踏上這段旅程，追溯C++的發展軌跡，看看它是如何從一個初級的概念演變成為今天全球廣泛使用的語言。這不僅僅是一篇文章，更是一場穿梭時光的冒險，讓我們一起揭開這門語言精彩的歷史面紗。<br><br/></p><h2 id="歷史與演化"><a class="header-anchor" href="#歷史與演化"></a>歷史與演化</h2><p>在20世紀70年代末，一位名叫Bjarne Stroustrup的丹麥計算機科學家，在他的研究工作中感受到了C語言在面對複雜問題時的局限性。Stroustrup希望增強<strong>C語言</strong>，讓它能更好地支<strong>數據抽象</strong>和<strong>物件導向編程</strong>，於是他開始了C++的開發工作。1983年，C++被正式命名，標誌著這門新語言的誕生。從那時起，C++迅速發展，成為了一門強大的編程語言。</p><div class="admonition info"><p class="admonition-title">C語言</p><p>C語言是一種高效能的程式語言，於1972年由丹尼斯·里奇在AT&amp;T的貝爾實驗室開發。它是一種通用的程式語言，非常適合系統編程，如作業系統或編譯器開發。C++是C語言的擴展，增加了物件導向等特性，因此C語言的語法絕大部份(並非全部)在C++裡也可以使用。</p><p>如果想更深入了解C與C++的差別，請參閱以下文章:</p><ul><li><a target="_blank" rel="noopener" href="https://www.freecodecamp.org/news/c-vs-cpp-whats-the-difference/">C vs C++ – What's The Difference?</a></li></ul></div><br/><p>從1990年代初到現在，C++經歷了多次重大更新。其中，C++98, C++11、C++14、C++17和C++20都是重要的里程碑，它們分別帶來了:</p><ul><li><p><strong>C++98</strong></p><ul><li><strong>首個標準化版本</strong>: C++98是C++的第一個標準化版本，由國際標準化組織（ISO）發布，即ISO/IEC 14882:1998。。這個版本固化了許多現在被認為是C++基礎的特性，如STL（標準模板庫）、異常處理、命名空間等。<br><br/></li></ul></li><li><p><strong>C++11</strong></p><ul><li>現代C++的開始: 這個版本被廣泛認為是現代C++的開端，它引入了許多革命性的新特性：<ul><li><strong>自動類型推導(auto)</strong>: 簡化變量聲明。</li><li><strong>範圍基於的for循環</strong>: 改善了集合的迭代方式。</li><li><strong>智能指針</strong>: 如unique_ptr和shared_ptr，提供自動記憶體管理。</li><li><strong>Lambda表達式</strong>: 支持匿名函數，增強了函數式編程能力。</li><li><strong>並發和多線程支持</strong>: 包括thread、mutex等，方便多線程編程。<br><br/></li></ul></li></ul></li><li><p><strong>C++14</strong></p><ul><li><strong>改善和擴展</strong>: C++14進一步改善了C++11的特性，並引入了更多的工具和功能。</li><li><strong>泛型Lambda表達式</strong>: 提供更靈活的Lambda。</li><li><strong>返回類型推導</strong>: 函數返回類型可自動推導。</li><li><strong>擴展的constexpr支持</strong>: 允許更多複雜的計算在編譯時完成。<br><br/></li></ul></li><li><p><strong>C++17</strong></p><ul><li><strong>進一步的現代化</strong>: C++17加入了更多現代化的特性，使語言更簡潔、更強大。</li><li><strong>結構化綁定</strong>: 簡化了數據結構的解包。</li><li><strong>if和switch語句中的初始化器</strong>: 改善了語句的寫法。</li><li><strong>內聯變量</strong>: 支持更靈活的變量定義。</li><li><strong>std::optional、std::variant和std::any</strong>: 提供更多標準庫中的工具。<br><br/></li></ul></li><li><p><strong>C++20</strong></p><ul><li><strong>最新的標準</strong>: C++20被認為是自C++11以來最大的一次更新。</li><li><strong>概念(concepts)</strong>: 引入了概念，以表達模板的要求。</li><li><strong>範圍視圖(ranges)</strong>: 提供了一種新的方式來操作和轉換數據集合。</li><li><strong>協程(coroutines)</strong>: 支持協程，改善非同步編程。</li><li><strong>模板的Lambda表達式</strong>: 使Lambda表達式更加強大。<br><br/></li></ul></li></ul><p>以上為一些我個人認為各版本重要的更新，由於篇幅原因，我沒辦法將所有更新一一列出。如果有興趣，可以前往以下網址閱讀更詳細的內容:</p><ul><li><a target="_blank" rel="noopener" href="https://github.com/AnthonyCalandra/modern-cpp-features">Modern C++ Feature - Anthony Calandra</a></li><li><a target="_blank" rel="noopener" href="https://en.cppreference.com/w/cpp/language/history">History of C++</a><br><br/></li></ul><h2 id="結語"><a class="header-anchor" href="#結語"></a>結語</h2><p>隨著我們走過C++的歷史長河，探索它的演進與革新，我們不僅了解了這門語言的技術細節，更重要的是，我們體會到了學習與成長的精神。從Bjarne Stroustrup的初衷到C++20的最新進展，每一步都凝聚著無數開發者的智慧與汗水，每一次更新都反映出對更好的語言特性的不懈追求。</p><p>對於渴望精通C++的你，這不僅僅是學習一門語言的過程，更是一場自我挑戰與超越的旅程。在這個旅程中，你會遇到困難與挑戰，但正如C++的發展歷程所示，這些困難和挑戰正是成長和進步的契機。當你在學習的路上遇到障礙時，回想這門語言的演進歷程，讓它激勵你繼續前進。</p><p>每個人的學習路徑都是獨一無二的，就像C++自身的演進一樣。不論你處於學習之路的哪個階段，都要記住：持續學習、勇於嘗試、不懼挑戰是達到精通的必經之路。正如我們所探索的那樣，C++的世界是廣闊而深邃的，充滿了無限的可能性與機遇。</p><p>在這篇文章的結尾，我想鼓勵每一位讀者，無論你是初學者還是資深開發者，都要保持對學習的熱情與好奇心。讓我們攜手共進，不斷探索，不斷進步，在C++的世界中開啟屬於我們自己的精彩章節。</p><p>準備好開始了嗎？讓我們一起<a target="_blank" rel="noopener" href="https://www.youtube.com/watch?v=sDGghk50ns0">迎風啟程</a>，正式啟航這段精彩的C++學習之旅吧！</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Coding </tag>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第二章 – 行前準備 – 編程環境配置</title>
      <link href="/2023-11-08/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E2%80%93-%E8%A1%8C%E5%89%8D%E6%BA%96%E5%82%99-%E2%80%93-%E7%B7%A8%E7%A8%8B%E7%92%B0%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2023-11-08/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E2%80%93-%E8%A1%8C%E5%89%8D%E6%BA%96%E5%82%99-%E2%80%93-%E7%B7%A8%E7%A8%8B%E7%92%B0%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<img src=Pack.jpg title="每段旅途的精彩啟航，皆源自於深度的籌備；在這精心布局的前奏中，細節的妥善安排便是順遂之旅的秘鑰" height=80% width=80%><div class="admonition info"><p class="admonition-title">本文所提供之連結</p><p>文章內所附的連結皆以通過掃毒軟體(Kaspersky)檢查，請安心服用。</p></div><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>每當航船即將啟航，船員們不會立即把錨升起、風帆揚起。他們首先確保船上的一切都已妥善，從儀器到補給，一切都已就緒。編程亦如此。在我們踏上編碼的旅程前，我們需要的不是驚人的想法或者複雜的演算法，而是一個完善且適合的編程環境，這就像是我們的航海圖與羅盤。</p><p>設定編程環境可能看似只是小溪邊的石子，但對初學者來說，這卻可能是前進的絆腳石。而對於熟悉的開發者，即使他們已經乘風破浪，但在嘗試新的海域時，良好的行前準備也是不可或缺的。</p><p>在這一章，我們將帶領你航過這片編程的海洋，教你如何挑選最鋒利的航海刀、安裝最完美的船帆，以及設定你的第一個航路。無論你是新船員還是資深的航海家，我都期望這篇指南能為你指明方向，讓你的旅程更加順利。</p><p>在我開始分享前，我想與各位分享我學習的方式。我不僅偏好嚴格按照書本的指導進行學習，當遇到書中未詳述的部分，我會主動進行深入的探索。這樣的學習過程就像心智圖，從一個中心思想不斷地向外擴展，無止境地探索。因為人腦對有連接的信息更容易記憶，這種學習策略使我能夠將知識串連起來。如此一來，在這無邊無際的知識海中，每一筆知識不再是孤立且彼此毫無瓜葛的魚，而是形成了一個繁盛且息息相關的生態體系。因此，在未來的文章中，只要有額外能延伸的知識點，會將該知識點粗體化，並在該段落下方使用<strong>筆記</strong>延伸該知識點。如果在該知識點有什麼需要注意的，我也會將該知識點粗體化，並在段落下方使用<strong>警告</strong>來提醒諸位讀者該注意的事項。</p><div class="admonition info"><p class="admonition-title">這是一個筆記的例子</p><p>未來的文章中，只要有額外能延伸的知識點，會將該知識點粗體化，並使用此格式來延伸該知識點。</p></div><div class="admonition warning"><p class="admonition-title">這是一個警告的例子</p><p>如果在該知識點有什麼需要注意的，我也會將該知識點粗體化，並用此格式來提醒諸位讀者該注意的事項。</p></div><p>準備好了嗎？讓我們一起開始準備行前的裝備吧!<br><br/></p><h2 id="準備清單"><a class="header-anchor" href="#準備清單"></a>準備清單</h2><ul><li><p>電腦與個人配置最低需求</p><ul><li>Windows 10 以上</li><li>CPU Intel i5 以上</li><li>至少 8 GB RAM</li><li>至少 500 GB 儲存空間</li><li>基本電腦使用能力 (包含如何使用Google尋找資料、下載檔案、執行檔案)<br><br/></li></ul></li><li><p>編程環境</p><ul><li>MSYS2 (軟體發布平台，用來下載編譯器)</li><li>Visual Studio Code (文字編輯器)<br><br/></li></ul></li></ul><h2 id="MSYS2-Minimal-System-2-用於Windows的軟體發布平台"><a class="header-anchor" href="#MSYS2-Minimal-System-2-用於Windows的軟體發布平台"></a>MSYS2 (Minimal System 2, 用於Windows的軟體發布平台)</h2><p>C++屬於<strong>編譯語言</strong>，意味著當你寫了一段程式碼後，你需要使用一個「<strong>編譯器</strong>」來將你的<strong>原始碼</strong>轉換成<strong>機器碼</strong>，這個轉換過程被稱為「<strong>編譯</strong>」。完成編譯後，你會得到一個<strong>可執行的檔案</strong>，然後你可以直接運行這個檔案，而不需要原始的程式碼。</p><div class="admonition info"><p class="admonition-title">編譯語言 (Compiled Language)</p><p>編譯語言是一種常見的程式語言執行方式，另一種常見的是 &quot;<strong>直譯語言</strong>&quot;。</p><ul><li>原始碼在執行前需要透過一個編譯器<u>完整地且一次性</u>轉換成機器碼。這個轉換過程是單一次性的，之後可以多次執行這個機器碼而不需再次編譯。</li><li>優點是速度快，因為已預先轉為機器碼；缺點是平台依賴，必須為每個平台編譯。</li><li>C和C++是典型的編譯語言。</li></ul></div><div class="admonition info"><p class="admonition-title">直譯語言 (Interpreted Language)</p><p>直譯語言是另一種常見的程式語言執行方式。</p><ul><li>不需要事先編譯，而是在執行時由直譯器<u>一行一行</u>地解讀和執行。</li><li>優點是跨平台，寫一次可以在多個平台上執行；缺點是速度較慢，因為實時解讀和執行源碼。</li><li>Python和JavaScript是直譯語言的例子。</li></ul></div><div class="admonition info"><p class="admonition-title">編譯器 (Compiler) & 編譯 (Compile)</p><p>一種特殊的<u>軟體</u> (編譯器不是什麼特別的硬體，它是軟體!)。</p><ul><li>主要功能是為一種語言（通常是高階程式語言，例如C++、C#···等）翻譯成另一種語言（通常是低階的機器語言或<strong>組合語言</strong>）。</li><li>當開發者使用高階語言撰寫程式時，該程式是人類可讀的，但機器無法直接執行。這時，編譯器就扮演了橋樑的角色，將人類可讀的程式碼轉換成機器可以理解和執行的代碼。這一轉換過程稱為「編譯」。編譯過程完成後，輸出的結果是機器語言代碼或稱為執行檔，可以在特定的硬體平台上運行。</li><li>C++編譯器常見的有MinGW/GCC、Clang、Microsoft Visual C++。<br/></li><li>相對於編譯器，還有一種稱為「直譯器」的工具，它會逐行解釋和執行程式碼，而不是先進行完整的轉換。</li></ul></div><div class="admonition info"><p class="admonition-title">原始碼 (Source Code)</p><p>最簡單的來說，所有你用C++···等高階語言寫的程式碼都是原始碼。以下為比較完整的解釋:</p><ul><li>程式設計中用來描述和實現功能的文字指令。這些指令是按照某一程式語言的語法規則寫成的。當你寫一個應用程式或網站時，你實際上是在撰寫原始碼。</li><li>一旦這些原始碼完成，它們會被編譯或解釋成電腦能夠執行的指令。想像原始碼像是一本食譜，電腦就像廚師，按照食譜的指示來製作菜餚。</li><li>透過閱讀和學習原始碼，我們可以理解程式是如何工作的，也可以對其進行修改和優化。</li></ul></div><div class="admonition info"><p class="admonition-title">機器碼 (Machine Code )</p><p>電腦的基本語言，直接被中央處理器（CPU）解讀與執行，由0和1組成。</p><ul><li>當你寫一段程式碼(原始碼)後，透過編譯器或直譯器轉換，該程式就被轉化為機器碼。</li><li>機器碼是二進位的，由0和1組成，代表具體的指令。</li><li>人類難以直接閱讀或編寫機器碼，所以我們通常使用較高階的語言來編程，再由工具轉為機器碼。但機器碼是電腦運作的核心，因為它是直接和硬體溝通的語言。</li></ul></div><div class="admonition info"><p class="admonition-title">可執行檔案 (Executable File)</p><p>電腦上的一種特殊檔案，它包含了一組電腦可以直接執行的指令。當你雙擊或運行這個檔案時，電腦會按照檔案中的指令操作。</p><ul><li>想像你寫了一個食譜，可執行檔就像是可以自己煮菜的機器人，它根據食譜完成煮食。</li><li>程式設計中，我們先寫程式碼（食譜），然後用特定的工具（例如編譯器）將其轉換為可執行檔案（機器人），使電腦能直接執行。</li><li>在Windows上，可執行檔案類型為 &quot;.exe&quot;。</li></ul></div><div class="admonition info"><p class="admonition-title">組合語言 (Assembly Code)</p><p>一種接近計算機硬體的低級程式語言。與高階程式語言（如C++或Python）不同，組合語言為特定的計算機架構設計，直接對應於機器語言指令。</p><ul><li>當你在組合語言中編寫程式時，你基本上是在告訴計算機進行非常具體的操作，例如將數據從一個記憶體位置移動到另一個位置或執行特定的算術運算。</li><li>由於它是那麼低階，它通常用於系統編程、嵌入式程式設計或其他需要與硬體直接交互的場合。</li><li>雖然組合語言允許開發人員進行細粒度的控制，但它也需要更多的工作和專業知識才能使用。</li></ul><p>以下為使用組合語言寫出的Hello, world (我也看不懂，未來有興趣會學):</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">data segment</span><br><span class="line">    msg db 'Hello World!','$'</span><br><span class="line">data ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">    assume cs:code, ds:data</span><br><span class="line">start:</span><br><span class="line">    mov ax, data       ;</span><br><span class="line">    mov ds, ax</span><br><span class="line"></span><br><span class="line">    lea dx, msg</span><br><span class="line">    mov ah, 09h</span><br><span class="line"></span><br><span class="line">    int 21h</span><br><span class="line">    mov ah, 4ch</span><br><span class="line"></span><br><span class="line">    int 21h</span><br><span class="line">code ends</span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure></p><p><em>(程式碼來源: <a target="_blank" rel="noopener" href="https://home.gamer.com.tw/artwork.php?sn=5378967">病毒開發(4) - 組合語言概述與超詳細ㄉHello World解釋</a>)</em></p></div><br/><p>補充了這麼多，各位讀者應該都知道編譯器是什麼了。接下來就是正式安裝啦!</p><ol><li>前往<a target="_blank" rel="noopener" href="https://www.msys2.org/">MSYS2</a>官網，並點擊Installation底下的下載點:</li></ol><p><img src="1.png" alt=""><br><br/></p><ol start="2"><li>執行下載下來的安裝檔，並遵循安裝檔的步驟 (可以使用安裝檔預設的資料夾 “C:\msys64”，也可以自己建立新的資料夾):</li></ol><p><img src="2.png" alt=""><br><img src="3.png" alt=""><br><br/></p><ol start="3"><li>執行 “MSYS2 UCRT64” (如果剛剛安裝結束沒有自動執行，可以在開始→所有應用程式→MSYS2資料夾內找到):</li></ol><p><img src="4.png" alt=""><br><br/></p><ol start="4"><li><p>在 “MSYS2 UCRT64” 中打: <code>pacman -S mingw-w64-ucrt-x86_64-gcc</code> (安裝Mingw/GCC)，並按Enter執行。<br><br/></p></li><li><p>“MSYS2 UCRT64” 會出現以下畫面(可能會有一些出入)，出現後再按一次Enter:</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">resolving dependencies...</span><br><span class="line">looking for conflicting packages...</span><br><span class="line"></span><br><span class="line">Packages (15) mingw-w64-ucrt-x86_64-binutils-2.41-2</span><br><span class="line">            mingw-w64-ucrt-x86_64-crt-git-11.0.0.r216.gffe883434-1</span><br><span class="line">            mingw-w64-ucrt-x86_64-gcc-libs-13.2.0-2  mingw-w64-ucrt-x86_64-gmp-6.3.0-2</span><br><span class="line">            mingw-w64-ucrt-x86_64-headers-git-11.0.0.r216.gffe883434-1</span><br><span class="line">            mingw-w64-ucrt-x86_64-isl-0.26-1  mingw-w64-ucrt-x86_64-libiconv-1.17-3</span><br><span class="line">            mingw-w64-ucrt-x86_64-libwinpthread-git-11.0.0.r216.gffe883434-1</span><br><span class="line">            mingw-w64-ucrt-x86_64-mpc-1.3.1-2  mingw-w64-ucrt-x86_64-mpfr-4.2.1-2</span><br><span class="line">            mingw-w64-ucrt-x86_64-windows-default-manifest-6.4-4</span><br><span class="line">            mingw-w64-ucrt-x86_64-winpthreads-git-11.0.0.r216.gffe883434-1</span><br><span class="line">            mingw-w64-ucrt-x86_64-zlib-1.3-1  mingw-w64-ucrt-x86_64-zstd-1.5.5-1</span><br><span class="line">            mingw-w64-ucrt-x86_64-gcc-13.2.0-2</span><br><span class="line"></span><br><span class="line">Total Download Size:    49.38 MiB</span><br><span class="line">Total Installed Size:  418.82 MiB</span><br><span class="line"></span><br><span class="line">:: Proceed with installation? [Y/n]</span><br><span class="line">[... downloading and installation continues ...]</span><br></pre></td></tr></table></figure><br/><ol start="6"><li><p>等待所有東西安裝完成後，再打<code>pacman -Sy</code> (更新所有編譯器至最新版本)，並按下Enter執行。<br>如果它出現 “<strong>Proceed with installation? [Y/n]</strong>”，再按一次Enter來確認更新編譯器。<br><br/></p></li><li><p>將剛剛下載的編譯器新增至Windows的環境變數的Path中:<br>(這樣你才可以在任何終端編譯你的C++原始碼，後面的文章會有更深入的解釋)<br><strong>- 步驟:</strong><br><strong>搜尋 &quot;環境變數&quot;→點選 &quot;編輯系統環境變數&quot;→點選右下角的 &quot;環境變數&quot;→ &quot;Path&quot;點擊兩下→點擊右上角 &quot;新增&quot;→貼上以下路徑→貼上後點擊確認</strong><br><br/></p></li></ol><div class="admonition info"><p class="admonition-title">路徑</p><p>路徑是一種電腦檔案或目錄的名稱的通用表現形式，它指向檔案系統上的一個唯一位置。</p><ul><li>如果是使用剛剛安裝檔的預設路徑，則路徑會是 &quot;C:\MSYS2\mingw64\bin&quot;和 &quot;C:\MSYS2\ucrt64\bin&quot;</li><li>如果是使用自訂的路徑，則路徑會是 &quot;&lt;自訂路徑&gt;\mingw64\bin&quot;和 &quot;&lt;自訂路徑&gt;\ucrt64\bin&quot;</li></ul></div><br/><img src=5.png height=80% width=80%><img src=6.png height=80% width=80%><img src=7.png height=80% width=80%><img src=8.png height=80% width=80%><br/><ol start="8"><li>上述所有步驟都完成了，就可以打開Windows內建的終端 - Command Line (CMD):<br><strong>- 步驟: 搜尋 &quot;cmd&quot;→點選命令提示字元</strong></li></ol><img src=9.png height=80% width=80%><br/><ol start="9"><li>在終端內打: <code>g++ --version</code>，並按Enter執行:</li></ol><img src=10.png height=80% width=80%><br/><ol start="10"><li>如果照著以上步驟，會出現以下畫面 (主要是 &quot;g++ (…) 13.2.0&quot;那行)，就表示成功了!<br><strong>(PS. 如果失敗的話，請在底下留言，或IG私訊我詢問)</strong></li></ol><img src=11.png height=80% width=80%><br/><h2 id="Visual-Studio-Code-VSCode-文字編輯器"><a class="header-anchor" href="#Visual-Studio-Code-VSCode-文字編輯器"></a>Visual Studio Code (VSCode, 文字編輯器)</h2><div class="admonition info"><p class="admonition-title">文字編輯器 (Text Editor)</p><p>一個讓使用者能夠創建、編輯和查看純文字檔案的軟體工具。不像文字處理器（例如Word）那樣有格式化功能，它主要用於編輯<u>純文字</u>。</p></div><p>對程式設計師來說，文字編輯器是一個非常重要的工具，因為程式碼通常都是純文字。有些文字編輯器，例如infopad++或Sublime，特別為編程設計，包含了語法高亮、程式碼自動完成等功能。選擇一個適合的文字編輯器，能夠使編碼過程更加順暢和高效。這次除了安裝VSCode本體與必要的擴充功能以外，我還會推薦一些我個人認為非常好用的擴充功能。各位如果有認為非常好用，但我沒有提到的，歡迎在下面留言!</p><ol><li>前往<a target="_blank" rel="noopener" href="https://code.visualstudio.com/">VSCode</a>官方網站，並點擊 “Download for Windows”:</li></ol><p><img src="12.png" alt=""><br><br/></p><ol start="2"><li>執行下載下來的安裝檔，並遵循安裝檔的步驟 (請確認第二步的第四項與第五項有打勾):</li></ol><img src=13.png height=80% width=80%><img src=14.png height=80% width=80%><br/><ol start="3"><li>打開剛剛載下來的VSCode，並點擊左邊的延伸模組，搜尋以下延伸模組並點擊安裝:</li></ol><ul><li><p>必要的擴充功能</p><ul><li><a target="_blank" rel="noopener" href="https://marketplace.visualstudio.com/items?itemName=jeff-hykin.better-cpp-syntax">Better C++ Syntax</a> (好看很多的C++語法高亮)</li><li><a target="_blank" rel="noopener" href="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools-extension-pack">C/C++ Extension Pack</a> (在VSCode編輯C++必要的擴充功能，包含基本語法高量、編輯與除錯(Debug))<br><br/></li></ul></li><li><p>推薦的擴充功能</p><ul><li><a target="_blank" rel="noopener" href="https://marketplace.visualstudio.com/items?itemName=streetsidesoftware.code-spell-checker">Code Spell Checker</a> (拼字檢查)</li><li><a target="_blank" rel="noopener" href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">Material Icon Theme</a> (為文件與資料夾增加小圖示)<br><br/></li></ul></li></ul><p><img src="15.png" alt=""><br><img src="16.png" alt=""><br><br/></p><h2 id="嘗試第一個C-程式"><a class="header-anchor" href="#嘗試第一個C-程式"></a>嘗試第一個C++程式</h2><p>準備工作從來都是最無趣的，但準備的愈萬無一失，旅程就會愈一帆風順。在做完準備工作後，我們就來寫第一個程式吧!</p><ol><li>在桌面新增一個專門儲存程式的資料夾:</li></ol><p><img src="17.png" alt=""><br><br/></p><ol start="2"><li>打開VSCode，點擊左上角 &quot;檔案&quot;→點擊 &quot;開啟資料夾&quot;→找到剛剛建立的資料夾→選擇資料夾並點擊右下角 “選擇資料夾”</li></ol><p><img src="18.png" alt=""><br><img src="19.png" alt=""><br><br/></p><ol start="3"><li>點擊左方 &quot;檔案總管&quot;資料夾名稱旁 &quot;新增檔案&quot;→創建一個叫做 “hello.<strong>cpp</strong>”</li></ol><p><img src="20.png" alt=""></p><div class="admonition info"><p class="admonition-title">檔案格式 (File Format)</p><p>所有檔案都會有&quot;檔案格式&quot;，指電腦爲了儲存資訊而使用的對資訊的特殊編碼方式，是用於辨識內部儲存的資料。</p><ul><li>例如:</li></ul><ul><li>Word是 &quot;.docx&quot;</li><li>圖片有 &quot;.png&quot;、 &quot;.pdf&quot;、 &quot;.jpg&quot;</li><li><strong>C++的檔案類型則是 &quot;.cpp&quot;</strong></li></ul></div><br/><ol start="4"><li>將以下程式碼打在剛剛創立的檔案中:</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello, world.&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="21.png" alt=""><br><br/></p><ol start="5"><li>點擊上方 &quot;終端機&quot;→ &quot;新增終端&quot;→下方視窗確認右上角為 “cmd”、路徑為你剛剛創建資料夾的路徑<br><strong>(如果剛剛資料夾是創建在桌面會是C:\Users\User\Desktop\&lt;資料夾名稱&gt;)</strong></li></ol><p><img src="22.png" alt=""><br><img src="23.png" alt=""><br><br/></p><ol start="6"><li>在終端打<code>g++ hello.cpp -o hello.exe</code>→按Enter執行這段指令→左上角會出現一個 &quot;hello.exe&quot;的可執行檔。確認有 &quot;hello.exe&quot;檔案→在終端打 &quot;hello.exe&quot;→按Enter執行→終端會出現 “Hello, world.”。<br><strong>(沒意外的話，一切會順利執行。在正式啟航後會解釋這些指令功用與目的。)</strong><br><strong>(PS. 如果失敗的話，請在底下留言，或IG私訊我詢問)</strong></li></ol><p><img src="24.png" alt=""><br><br/></p><h2 id="結語"><a class="header-anchor" href="#結語"></a>結語</h2><p>恭喜您走到這一步，已經完成了前進之路的一半😀！接下來的一半需要您擁有一顆「<strong>勇敢面對挑戰的心</strong>」以及「<strong>絕不輕言放棄的毅力</strong>」。為什麼會這麼說呢？學習程式的曲線有其特殊之處，請參考以下圖表。</p><img src=25.png height=80% width=80%><br/><p>我個人也是初學者，目前仍處於「牽手蜜月期」(Hand-Holding Honeymoon)，因此無法自認有足夠資格詮釋這一切。在您踏上程式之旅之前，我強烈建議您閱讀以下三篇文章，以便為未來可能遭遇的情況做好心理準備。</p><ul><li><a target="_blank" rel="noopener" href="https://kaochenlong.com/2023/10/04/how-to-be-a-developer.html">程式為什麼這麼難學？</a></li><li><a target="_blank" rel="noopener" href="https://www.inside.com.tw/article/4480-why-learning-to-code-is-so-damn-hard">為什麼成為一名工程師這麼難</a></li><li><a target="_blank" rel="noopener" href="https://www.thinkful.com/blog/why-learning-to-code-is-so-damn-hard/">Why Learning to Code is So Damn Hard</a>(曲線圖原出處)<br><br/></li></ul><p>如果您閱讀完這些文章後開始對自己產生一些自我懷疑，例如</p><ul><li>我不是本科生耶，我可以學程式嗎😥?</li><li>我英文、數學不好…應該沒辦法學吧🥺?</li><li>我已經三十幾歲了，現在轉職會不會太晚😭？</li></ul><p>請不要擔心，每個人都具有學習程式的潛力，實際上，這也適用於任何其他知識領域。即使您不是本科生（就像我一樣），您可能需要額外的時間來穩固基本知識和蒐集資料。英文和數學能力雖然在追求更高競爭力的目標中很重要，但它們對於「開始學習程式」並不是絕對必要的技能。在網上有大量免費的中文資源可供參考，而在初學階段，數學並不是必要的技能。最後，年齡絕對不是限制，無論您年齡是30、40，甚至80，只要您充滿熱情和意願，都有能力學習。如果您仍然感到不安，我建議閱讀以下兩篇文章：</p><ul><li><a target="_blank" rel="noopener" href="https://kaochenlong.com/2021/09/19/does-cs-background-matter.html">非本科系有辦法學程式嗎？</a></li><li><a target="_blank" rel="noopener" href="https://tw.alphacamp.co/blog/english-math-coding-requirement">新手學程式，英文、數學能力重要嗎？</a><br><br/></li></ul><p>好了，話說得有些多了，這篇篇幅有點長，非常感謝各位閱讀到此。讓我們為下一步正式啟航做好準備吧😆！</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Coding </tag>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一章 - 關鍵的第一步 - 為何選擇C++</title>
      <link href="/2023-11-05/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E9%97%9C%E9%8D%B5%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5-%E7%82%BA%E4%BD%95%E9%81%B8%E6%93%87c/"/>
      <url>/2023-11-05/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E9%97%9C%E9%8D%B5%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AD%A5-%E7%82%BA%E4%BD%95%E9%81%B8%E6%93%87c/</url>
      
        <content type="html"><![CDATA[<p><img src="Choice.jpg" alt="每扇打開的門都洋溢著光明，象徵著新機遇和可能性，但選擇哪條路徑卻是每個人必須面對的決定。"></p><h2 id="前言"><a class="header-anchor" href="#前言"></a>前言</h2><p>大家好，很榮幸又和您在此見面。在當今的數字化時代，編程已經成為了必備技能的核心。選擇首個學習的程式語言，就如同選擇學習的第一門外語，充滿了期待與疑惑。那麼，為何我會選擇C<ins>作為我的出發點呢？這其中隱含的原因和影響又會是怎樣的？在以下的文章中，我將分享我的選擇心路歷程，以及C</ins>所帶給我的啟示與挑戰。希望這些心得能為您在編程的道路上提供一絲指引和啟發。<br><br/></p><h2 id="決定第一個語言是否重要"><a class="header-anchor" href="#決定第一個語言是否重要"></a>決定第一個語言是否重要</h2><p>當我們開始探索編程的世界前，都將面對這關鍵的問題：該選擇哪個程式語言作為起點？這似乎是一道深具分量的問題。有的人認為，第一個語言既影響初學者的起步體驗，又可能對其未來的技術轉型造成深遠影響。但同時，也有關認為第一個語言其實無足輕重，畢竟每個人的程式生涯絕對不可能只接觸一個語言，就如同每種型號的螺絲要使用不同的螺絲起子一樣，不同的問題也會有相對應適合的程式語言來解決。儘管不同人對此有不同的觀點，但我們無法否認，第一個接觸的語言或多或少會塑造我們的技術視野。我個人則認為，第一個語言往往會決定您日後轉入其它語言的適應速度，畢竟由深入淺易，由淺入深難嘛。因此，選擇C++最根本的原因，就是我傾向先苦後甘，先從困難的開始。除此之外，還有幾個原因。<br><br/></p><h2 id="為何選擇C"><a class="header-anchor" href="#為何選擇C"></a>為何選擇C++</h2><p>初探程式時，C<ins>就展現了其在鞏固編程根基上的獨特之處。這是一門促使開發者深入探索電腦運作原理的語言，不僅令人思考“代碼的功能”，更追求其“背後的運作邏輯”。這種深度的洞察，猶如一盞明燈，為學習其他高階語言照亮前路。以C</ins>為例，其核心思想和語法經常滲透於今日的多種程式語言中。因此，當你從C++出發，無論是Python、C#或其他語言，在日後觸碰時你都將更加得心應手。它如同掌中的通用鑰匙，助你順暢地探索多種語言的玄奧。</p><p>再者，C++以出色的性能而自豪。作為一種與硬體更親近的語言，它賦予你近乎直接的記憶體操作能力，讓你能夠細緻調控，追求程式的極致性能。在這個追求效率的時代，能編寫高效程式，已成為職場上的獨特賣點。</p><p>但C<ins>的魅力並不止步於此。其物件導向(Object-Oriented)的特性讓你從初步入手便能學會結構化的設計方法，這對於後續的大型項目開發至關重要。此外，C</ins>還擁有各式各樣的函式庫(Library)，從標準模板庫(Standard Template Library, STL)到各類開源工具，都為開發者開闢了寬廣的學習和實踐場地。這豐富的生態不只滿足你對功能的需求，更刺激你的好奇心，促使你不斷拓展技術視界。</p><p>綜上所述，C<ins>不只是學習程式的良好起點，它鋪設了扎實的基石，激發了解決問題的智慧，並為未來的技術探索展現了無盡可能性。在這趟學習旅程中，每一步都是一次的挑戰，每次的突破都帶來成長和成果。因此，我深信，這條由C</ins>起始的道路，會引領我進入更加廣袤的技術領域。<br><br/></p><h2 id="結語"><a class="header-anchor" href="#結語"></a>結語</h2><p>感謝您耐心地閱讀完這篇文章。如果您有任何寶貴建議或發現需要改進或錯誤之處，我誠摯地邀請您於下方留言分享。在即將到來的下一章，我將會細緻地引領大家進入編程之旅的第一步，其中涵蓋了如何下載C++編譯器、配置完整的文字編輯器以及進行一些Windows系統相關的環境設置。請繼續關注並期待接下來的內容!</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> Coding </tag>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第零章 - 程式之旅 - 我的部落格之始</title>
      <link href="/2023-11-01/%E7%AC%AC%E9%9B%B6%E7%AB%A0-%E5%95%9F%E8%88%AA%E7%A8%8B%E5%BC%8F%E4%B9%8B%E6%97%85-%E6%88%91%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC%E4%B9%8B%E5%A7%8B/"/>
      <url>/2023-11-01/%E7%AC%AC%E9%9B%B6%E7%AB%A0-%E5%95%9F%E8%88%AA%E7%A8%8B%E5%BC%8F%E4%B9%8B%E6%97%85-%E6%88%91%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC%E4%B9%8B%E5%A7%8B/</url>
      
        <content type="html"><![CDATA[<p><img src="Storm.png" alt="冒著風暴，也要向夢想前行"></p><h2 id="自介"><a class="header-anchor" href="#自介"></a>自介</h2><p>大家好！我是The Lonesome Coder，很榮幸您閱讀了我的第一篇文章，也很高興能在這裡和您分享我學習程式的過程中所獲得的知識和心得。<br><br/></p><h2 id="創立部落格的原因"><a class="header-anchor" href="#創立部落格的原因"></a>創立部落格的原因</h2><p>如同宇宙中每顆星辰織錦於夜空，各自璀璨，航行於定命的軌道，每艘扶櫓而行的小船也心懷目標，隨著某個深藏心中、撼動靈魂的夢想而起航。而這艘名為“The Lonesome Coder’s Blog”的小船，懷著目標與我個人的夢想，在今日正式啟航。</p><p>那麼，這支航向未知的小船目標為何? 也許您曾聽過「門徒效應」(The Protege Effect)這一術語。這是當我們教導他人時，自己的理解和記憶也會得到鞏固與加深的現象。每當我探索新的程式設計知識或技巧，我總懷著興奮的心情急於與他人分享。然而，隨著分享的經歷增加，我驚覺，在闡明這些概念時，屢次會碰到自己尚未完全掌握的領域。因此，這艘船銳意航行的方向，便是「透過教學來揭示自我認知的空白，並將知識的光芒傳遞給需要的人」。這不僅幫助我發現自身的不足，也讓我有機會貢獻所學，照亮他人的學習之旅。<br><br/></p><h2 id="選擇自建部落格的原因"><a class="header-anchor" href="#選擇自建部落格的原因"></a>選擇自建部落格的原因</h2><p>當我決定建立自己的部落格時，市面上有許多現成的平台可以選擇，例如Medium、方格子、痞客邦…等等。當然，使用現成的平台肯定是最輕鬆方便的，什麼都不用管，只要負責寫文章就好了。然而，在查閱了更多資料後，我選擇了使用Hexo與GitHub.io進行部落格建設。這種選擇可能對許多人來說不太常見，畢竟大多數人都希望簡單。以下幾點是讓我選擇自建網站的原因:</p><ol><li><p><strong>完全的控制權</strong><br>使用Hexo架設的部落格，配合GitHub.io的託管(Hosting)，讓我有完全的控制權。我可以決定整個網站的設計、風格和功能。與此相反，Medium等平台雖然提供了一個非常優雅、乾淨的寫作環境，但它們的自訂選項是極度有限的。再者，使用Hexo架構允許我在發佈文章時，可以使用Markdowm語言，而Markdown允許我在發佈程式語言相關內容時可以表現地更清楚。有了完全的控制，我可以確保我的網站不只是另一個千篇一律的部落格，而是真正反映我的個性的、屬於我自己的樂園。</p></li><li><p><strong>學習經驗</strong><br><a target="_blank" rel="noopener" href="http://xn--HexoGitHub-2u5pm927a878avb4b90a.io">透過使用Hexo與GitHub.io</a>，我也學習了許多關於網站建設的知識。這些經驗對我來說是寶貴的，它不僅加深了我對Web技術的了解，還強化了我的問題解決能力。</p></li><li><p><strong>成本效益</strong><br>使用GitHub.io來Host我的Hexo部落格是完全免費的。相較之下，要在Medium上移除廣告則需要支付額外的費用。</p></li><li><p><strong>SEO優化</strong><br>除了可以自己學習如何優化網站的SEO外，由於我有完全的控制權，我可以確保我的網站是有達成SEO優化的。這意味著我的文章更容易在搜索引擎中獲得較好的排名，從而吸引更多的讀者。</p></li><li><p><strong>獨立性</strong><br>自己建立部落格意味著不依賴於任何第三方平台的變化和策略轉變。舉個例子，假設Medium改變其政策或營運模式，使用該平台的部落格主可能會受到影響。而我所使用的組合確保了我的內容和讀者基本不受這些外部因素的影響。</p></li></ol><p>如果各位對於自己架設網站有興趣，請在留言區告訴我。我會在日後分享架設網站的過程與步驟。<br><br/></p><h2 id="部落格未來發展"><a class="header-anchor" href="#部落格未來發展"></a>部落格未來發展</h2><p>僅僅兩個月前，我下定決心踏入這個充滿無限可能的電腦世界。起初，面對從何學起的程式語言、解決問題的方法，我感到茫然和不安，經常獨自焦慮，花費長時間搜尋資料。但現在，我已能熟練地運用關鍵字，針對特定問題找到具體的解決方案。在接下來的章節裡，我將與您分享我選擇C<ins>的原因（我沒有嘗試過其他語言，因此不會評論如何選擇第一門語言）、設定編程環境的初始步驟、以及我在學習C</ins>過程中遇到的挑戰與收穫。從基本概念到進階技巧，我將逐步地把這段旅程整理成文章，無論您是初學者或經驗豐富的開發者，我相信這些內容都將為您帶來新的、有趣的洞見。讓我們一同期待這激動人心的學習之旅！<br><br/></p><h2 id="結語"><a class="header-anchor" href="#結語"></a>結語</h2><p>如果想收到我發布文章的消息，除了用關注我的部落格外。也可以追蹤我的IG，我會在那邊發佈新文章已經上線的消息。完整文章會在部落格發表，IG則是該文章的主題與簡短內容(大部分會直接使用前言)。由於還是有正職，所以未來我會以每週 1-2 篇的頻率發文。。如果你有任何想知道的問題或建議的主題，也請在留言區告訴我，任何意見我都會仔細考量。非常感謝。</p>]]></content>
      
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coding </tag>
            
            <tag> Programming </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
